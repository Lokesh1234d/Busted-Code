import boto3
import csv
from botocore.exceptions import ClientError

def send_email_with_attachment(sender, recipient, subject, body, attachment_name, attachment_data):
    # Create an SES client
    ses_client = boto3.client('ses')

    # Send email with attachment
    try:
        response = ses_client.send_email(
            Source=sender,
            Destination={
                'ToAddresses': [recipient]
            },
            Message={
                'Subject': {
                    'Data': subject
                },
                'Body': {
                    'Text': {
                        'Data': body
                    }
                }
            },
            Attachments=[
                {
                    'FileName': attachment_name,
                    'ContentType': 'text/csv',
                    'Data': attachment_data
                }
            ]
        )
    except ClientError as e:
        print(f"Error sending email: {e.response['Error']['Message']}")
        return False
    else:
        print(f"Email sent! Message ID: {response['MessageId']}")
        return True


def lambda_handler(event, context):
    # Create an S3 client
    s3_client = boto3.client('s3')

    # Get the S3 service event history
    try:
        response = s3_client.list_bucket_events()
        events = response['Events']
    except ClientError as e:
        print(f"Error retrieving S3 service event history: {e.response['Error']['Message']}")
        return {
            'statusCode': 500,
            'body': 'Failed to retrieve S3 service event history.'
        }

    # Prepare the CSV data
    csv_data = []
    for event in events:
        csv_data.append([event['EventId'], event['EventTime'], event['BucketName'], event['EventName'], event['UserIdentity']['PrincipalId']])

    # Create a CSV file from the data
    csv_file = ''
    with open('/tmp/s3_event_history.csv', 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['EventId', 'EventTime', 'BucketName', 'EventName', 'UserIdentity'])
        writer.writerows(csv_data)
        csv_file = file.name

    # Read the CSV file content
    with open(csv_file, 'rb') as file:
        attachment_data = file.read()

    # Send the report via email with the CSV file as an attachment
    sender = 'your-email@example.com'
    recipient = 'recipient-email@example.com'
    subject = 'S3 Service Event History Report'
    body = 'Please find attached the S3 service event history report.'

    if send_email_with_attachment(sender, recipient, subject, body, 's3_event_history.csv', attachment_data):
        return {
            'statusCode': 200,
            'body': 'S3 service event history report sent successfully.'
        }
    else:
        return {
            'statusCode': 500,
            'body': 'Failed to send S3 service event history report.'
        }
