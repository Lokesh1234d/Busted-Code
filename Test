import boto3
from botocore.exceptions import ClientError

def send_email(sender, recipient, subject, body):
    # Create an SES client
    ses_client = boto3.client('ses')
    
    # Send email
    try:
        response = ses_client.send_email(
            Source=sender,
            Destination={
                'ToAddresses': [recipient]
            },
            Message={
                'Subject': {
                    'Data': subject
                },
                'Body': {
                    'Text': {
                        'Data': body
                    }
                }
            }
        )
    except ClientError as e:
        print(f"Error sending email: {e.response['Error']['Message']}")
        return False
    else:
        print(f"Email sent! Message ID: {response['MessageId']}")
        return True

def lambda_handler(event, context):
    # Create an S3 client
    s3_client = boto3.client('s3')
    
    # Get the S3 bucket event notifications
    try:
        response = s3_client.list_buckets()
        buckets = response['Buckets']
    except ClientError as e:
        print(f"Error listing S3 buckets: {e.response['Error']['Message']}")
        return {
            'statusCode': 500,
            'body': 'Failed to retrieve S3 buckets.'
        }
    
    # Initialize the report body
    report_body = "S3 Bucket Event Report:\n\n"
    
    # Iterate through each bucket
    for bucket in buckets:
        bucket_name = bucket['Name']
        
        # Get the bucket's event notifications
        try:
            response = s3_client.get_bucket_notification_configuration(Bucket=bucket_name)
            events = response.get('LambdaFunctionConfigurations', [])
        except ClientError as e:
            print(f"Error retrieving event notifications for bucket '{bucket_name}': {e.response['Error']['Message']}")
            continue
        
        # Get the bucket's tagging information
        try:
            tagging_response = s3_client.get_bucket_tagging(Bucket=bucket_name)
            if 'TagSet' in tagging_response:
                has_tags = True
            else:
                has_tags = False
        except ClientError:
            has_tags = False
        
        # Append bucket information to the report body
        if events:
            report_body += f"Bucket: {bucket_name}\n"
            for event in events:
                report_body += f"Event Name: {event['LambdaFunctionArn']}\n"
                report_body += f"Username: {event['Filter']['Key']['FilterRules'][0]['Value']}\n"
                report_body += f"Has tags: {has_tags}\n"
                report_body += "---\n"
    
    # Send the report via email
    sender = 'your-email@example.com'
    recipient = 'recipient-email@example.com'
    subject = 'S3 Bucket Event Report'
    
    if send_email(sender, recipient, subject, report_body):
        return {
            'statusCode': 200,
            'body': 'S3 bucket event report sent successfully.'
        }
    else:
        return {
            'statusCode': 500,
            'body': 'Failed to send S3 bucket event report.'
        }
